#!/usr/bin/env ruby

# To work without being installed as a gem:
libdir = File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))
$:.unshift libdir unless $:.include? libdir

require 'nanite'
require 'nanite/admin'
require 'eventmachine'
require 'thin'
# IMPORTANT!
# You need raggi's patched async version of Thin at the moment to use
# the nanite-admin tool.
#
# raggi's Git repo contains a branch called 'async_for_rack' which contains the
# version of Thin you want to install.  raggi has apparently removed the 'master'
# branch of his Git repo so you may see a warning like that shown below.
#
# git clone git://github.com/raggi/thin.git thin-raggi-async
# ...
# warning: remote HEAD refers to nonexistent ref, unable to checkout.   <<==  IGNORE THIS
#
# cd thin-raggi-async/
# git checkout --track -b async_for_rack origin/async_for_rack
# warning: You appear to be on a branch yet to be born.                 <<==  IGNORE THIS
# warning: Forcing checkout of origin/async_for_rack.                   <<==  IGNORE THIS
# Branch async_for_rack set up to track remote branch refs/remotes/origin/async_for_rack.
# Switched to a new branch "async_for_rack"

# run : 'rake install' to build and install the Thin gem
# cd <NANITE>
# ./bin/nanite-admin

# When you need to update this Thin install you should be able to do a 'git pull' on the
# "async_for_rack" branch.

require File.dirname(__FILE__) + '/../lib/nanite'
require 'yaml'
require "optparse"


options = {:root => Dir.pwd,
            :identity => 'mapper',
            :user => 'mapper',
            :pass => 'testing',
            :ping_time => 15,
            :vhost => '/nanite',
            :host => '0.0.0.0',
            :mapper => true,
            :secure => false}

# Build a parser for the command line arguments
opts = OptionParser.new do |opts|
  opts.version = Nanite::VERSION

  opts.banner = "Usage: nanite-admin [-flags] [argument]"
  opts.define_head "Nanite Mapper: clustered head unit for self assembling cluster of ruby processes."
  opts.separator '*'*80

  opts.on("-i", "--irb-console", "Start nanite in irb console mode.") do |console|
    options[:console] = 'irb'
  end

  opts.on("-u", "--user USER", "Specify the rabbitmq username.") do |user|
    options[:user] = user
  end

  opts.on("-h", "--host HOST", "Specify the rabbitmq hostname.") do |host|
    options[:host] = host
  end

  opts.on("-P", "--port PORT", "Specify the rabbitmq PORT, default 5672.") do |port|
    options[:port] = port
  end

  opts.on("-t", "--token IDENITY_TOKEN", "Specify the nanite identity token.") do |ident|
    options[:identity] = ident
  end

  opts.on("-p", "--pass PASSWORD", "Specify the rabbitmq password") do |pass|
    options[:pass] = pass
  end

  opts.on("--ping-time PINGTIME", "Specify the ping time (how often the nanites contact the mappers)") do |ping|
    options[:ping_time] = ping
  end

  opts.on("-j", "--json", "Use JSON as the wire format rather then marshaled ruby objects") do |json|
    options[:format] = :json
  end

  opts.on("-v", "--vhost VHOST", "Specify the rabbitmq vhost") do |vhost|
    options[:vhost] = vhost
  end
  
  opts.on("-s", "--secure", "Use Security features of rabbitmq to restrict nanites to themselves") do
    options[:secure] = true
  end

  opts.on("--version", "Show the nanite version number") do |res|
    puts "Nanite Version #{opts.version}"
    exit
  end

end

opts.parse!

EM.run do
  agent = Nanite.start(options)
  puts "starting nanite-admin"
  Rack::Handler::Thin.run Nanite::Admin.new(agent), :Port => 4000
end