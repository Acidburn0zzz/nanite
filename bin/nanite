#!/usr/bin/env ruby

require 'yaml'
require "optparse"
require File.dirname(__FILE__) + '/../lib/nanite'

options = {:root => Dir.pwd,
           :services => [],
           :log_level => 'info' }

# Build a parser for the command line arguments
opts = OptionParser.new do |opts|
  opts.version = Nanite::VERSION

  opts.banner = "Usage: nanite -[c] [argument]"
  opts.define_head "Nanite: self assembling cluster of ruby processes."
  opts.separator '*'*80

  opts.on("-n", "--nanite NANITE_ROOT", "This flag is for setting the root of your nanite agent project.") do |nanite|
    options[:root] = nanite
  end

  opts.on("-i", "--irb-console", "This flag will start merb in irb console mode.") do |console|
    options[:console] = 'irb'
  end

  opts.on("-u", "--user USER", "This flag is for setting the rabitmq username.") do |user|
    options[:user] = user
  end

  opts.on("-h", "--host HOST", "This flag is for setting the rabitmq hostname.") do |host|
    options[:host] = host
  end

  opts.on("-P", "--port PORT", "This flag is for setting the rabitmq PORT, default 5672.") do |port|
    options[:port] = port
  end

  opts.on("-t", "--token IDENITY", "This flag is for setting the nanite identity.") do |ident|
    options[:identity] = ident
  end

  opts.on("-p", "--pass PASSWORD", "This flag is for setting the rabbitmq password") do |pass|
    options[:pass] = pass
  end

  opts.on("-v", "--vhost VHOST", "This flag is for setting the rabbitmq vhost") do |vhost|
    options[:vhost] = vhost
  end

  opts.on("-j", "--json", "This flag is for using JSON as the wire format rather then marshaled ruby objects") do |json|
    options[:format] = :json
  end

  opts.on("-d", "--daemonize", "This flag is for run the nanite as a daemon") do |d|
    options[:daemonize] = true
  end

  opts.on("-s", "--services SERVIVES", "This flag is for setting the nanite's global services: -s /slice/42,/foo/3") do |res|
    options[:services] = res.split(/,/).map { |r| r.strip }
  end
  
  opts.on("-l", "--log-level LEVEL", "This flag is for setting the log level") do |level|
    options[:log_level] = level
  end

end

opts.parse!

EM.run {
  Nanite.start options
}

