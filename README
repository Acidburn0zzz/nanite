Nanite Map/Reduce Agent Framework

Make sure you have erlang installed

Get a copy of shoes and install it:
http://shoooes.net/dist/shoes-0.r925-intel.dmg

Get amqp and get a rabbitmq server up and running in one terminal
$ sudo gem install eventmachine
$ git clone git://github.com/tmm1/amqp.git
$ cd amqp && rake gem && sudo gem install amqp-<version>.gem

RabbitMQ Setup:
You'll need mercurial http://www.selenic.com/mercurial/wiki/index.cgi/BinaryPackages

Mac OS X
$ cd ~/<your root src dir>
$ mkdir rabbit (this will be <RABBIT> hereunder)
$ hg clone http://hg.rabbitmq.com/rabbitmq-server/
$ hg clone http://hg.rabbitmq.com/rabbitmq-codegen/
$ cd /usr/local/lib/erlang/lib
$ ln -s <RABBIT>/rabbitmq-server rabitmq-server-<version>
* Add <RABBIT>/scripts to your $PATH

TODO: Linux (I'm told it's easier here)

$ cd rabbit/rabbitmq-server
$ make run

Now cd into the nanite git checkout

Let's run a script to setup 15 agent accounts with a vhost and 
permissions setup properly as well as mapper account.
(rabbitmq broker must be running before you run this script)

$ ./bin/rabbitconf

now run a few nanite agents

$ cd nanite/examples/myagent
$ nanite

$ cd nanite/examples/foo
$ nanite


now you will need to run a mapper to make requests from. You can run this stad alone 
to get a shell or you can instantiate a mapper from within your merb/rails app as needed

$ ./bin/mapper
>> puts Nanite.request('/mock/list') {|res| p res }

By default this will dispatch to the agent with the lowest reported load average. 
There are a few other selectors as well:
# run this request on *all* agents that expose the /gems/list actor
>> puts Nanite.request('/gems/list', 'merb', :all) {|res| p res }

# run this request on one random agent that expose the /gems/list actor
>> puts Nanite.request('/gems/list', 'merb', :random) {|res| p res }



you can run as many mappers as you want, they will all be hot masters

Have fun!



